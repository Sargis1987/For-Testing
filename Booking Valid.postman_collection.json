{
	"info": {
		"_postman_id": "5fa7afd0-ea98-4628-80f9-93226e60c3b4",
		"name": "Booking Valid",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Create Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b18f2f5a-b8ff-4c5e-95b9-9ee1aab5f053",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// since the provided token length always have 15 digits \r",
									"pm.test(\"checking the length of token\", function () {\r",
									"    pm.expect(jsonData.token).to.have.lengthOf(15);\r",
									"});\r",
									"// we must be asured that response body always contain key:\"token\"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/auth",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "In order to work with booking API you will need this"
					},
					"response": []
				}
			],
			"description": "This will include the only request for creating token, where aser: \"admin\", password:\"password123\" ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1142f5de-0ae1-47e6-a133-896ddfee2827",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1765aa55-85a8-4503-a623-fe0cf5eb2af2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CreatBooking",
			"item": [
				{
					"name": "Create Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f7419b4-99cd-4f5e-a7ec-2cdfdcc7329e",
								"exec": [
									"// the values in request body are set in collection variables\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.booking.firstname).to.eql(pm.variables.get(\"firstname\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Your test lastname\", function () {\r",
									"    pm.expect(jsonData.booking.lastname).to.eql(pm.variables.get(\"lastname\"));\r",
									"});\r",
									"// checking if the response header contain key:\"Date\" \r",
									"pm.test(\"Date of Creation Check \", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7887e13f-01b0-45db-bfde-1a8b948d08f7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/booking",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			],
			"description": "The reguests in this folder create a new booking in the API ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7c2a65f6-1ad0-42b4-b2aa-373927858e1e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "87e40d73-8408-40f0-9867-15fed98bbe1e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Booking info",
			"item": [
				{
					"name": "GetBookingIds whole",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d569d1e7-8e63-4d05-a003-3adb5f63d6d6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Must include key named bookingid\", function () {\r",
									"    pm.expect(pm.response.text(\"bookingid\")).to.include(\"bookingid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Checking whether body is not empty\", function () {\r",
									"   pm.expect(jsonData).not.to.have.lengthOf(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "Returns the ids of all the bookings that exist within the API. Can take optional query strings to search and return a subset of booking ids.\r\n\r\n"
					},
					"response": []
				},
				{
					"name": "All Id's filterd by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f4e1d5c-afbc-41d9-8b36-0fe6b64347af",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"The response is not empty\", function () {\r",
									"    pm.expect(jsonData).not.to.have.length(0);\r",
									"});\r",
									"\r",
									"var booking_ids = _.map(jsonData, 'bookingid');\r",
									"\r",
									"// the id for our newly created object should be in the list of ids\r",
									"pm.test(\"Expected booking id is in the returned array\", function () {\r",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?firstname={{firstname}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}"
								}
							]
						},
						"description": "Returns the ids filter by name"
					},
					"response": []
				},
				{
					"name": "All Id's filterd by lastname ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8e2d258-db67-4821-9cd6-6a8b2b39c267",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"var booking_ids = _.map(jsonData, 'bookingid');\r",
									"\r",
									"pm.test(\"Expected booking id is in the returned array\", function () {\r",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ce0b142e-bffe-46a1-b8d5-ad318e6781ff",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?lastname={{lastname}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						},
						"description": "Returns the ids filter by lastname"
					},
					"response": []
				},
				{
					"name": "All Id's filterd by name and lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6a29eeb-9346-4fc2-b604-3a87e21254f7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"var booking_ids = _.map(jsonData, 'bookingid');\r",
									"\r",
									"pm.test(\"Expected booking id is in the returned array\", function () {\r",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?firstname={{firstname}}&lastname={{lastname}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						},
						"description": "Returns the ids filter by name and lastname"
					},
					"response": []
				},
				{
					"name": "Booking id's filterd by date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73c34bf1-5632-453f-a43a-bfbe00c04a78",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"// use lodash map to get a flat array of all the returned booking ids\r",
									"// https://lodash.com/docs/4.17.11#map\r",
									"var booking_ids = _.map(jsonData, 'bookingid');\r",
									"console.log(booking_ids);\r",
									"\r",
									"// the id for our newly created object should be there\r",
									"pm.test(\"Expected booking id is in the returned array\", function () {\r",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?checkin={{checkin}}&checkout={{checkout}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}"
								},
								{
									"key": "checkout",
									"value": "{{checkout}}"
								}
							]
						},
						"description": "All id's filter by check-in, check-out date"
					},
					"response": []
				},
				{
					"name": "Booking id's filterd by check-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57bb2b66-65d8-4617-b206-07634e0ac763",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"// use lodash map to get a flat array of all the returned booking ids\r",
									"// https://lodash.com/docs/4.17.11#map\r",
									"var booking_ids = _.map(jsonData, 'bookingid');\r",
									"console.log(booking_ids);\r",
									"\r",
									"// the id for our newly created object should be there\r",
									"pm.test(\"Expected booking id is in the returned array\", function () {\r",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?checkin={{checkin}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}"
								},
								{
									"key": "checkout",
									"value": "{{checkout}}",
									"disabled": true
								}
							]
						},
						"description": "All id's filter by check-in date"
					},
					"response": []
				},
				{
					"name": "Booking id's filterd by check-out",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8ee94de-8eb8-4b82-b852-292d9c0c4dcf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"// use lodash map to get a flat array of all the returned booking ids\r",
									"// https://lodash.com/docs/4.17.11#map\r",
									"var booking_ids = _.map(jsonData, 'bookingid');\r",
									"console.log(booking_ids);\r",
									"\r",
									"// the id for our newly created object should be there\r",
									"pm.test(\"Expected booking id is in the returned array\", function () {\r",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?checkout={{checkout}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "{{checkout}}"
								}
							]
						},
						"description": "All id's filter by check-out date"
					},
					"response": []
				},
				{
					"name": "Booking by exact id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff4d3149-6e92-419f-9ec5-4aa0be8e00a6",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"  pm.variables.set(\"expected\", res.json().booking)\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "804637e1-b4a8-4203-93a1-d382605080ad",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Expected booking is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"expected\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						},
						"description": "Returns a specific booking based upon the booking id provided"
					},
					"response": []
				}
			],
			"description": "This will contain the main requests for operating with API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "197b3505-cbde-448c-98c9-7ad9412fc0ed",
						"type": "text/javascript",
						"exec": [
							"// as this project is used by many people, we must always create a new booking in order to test it",
							"// creates the request",
							"const createBooking = {",
							"  url: pm.environment.get(\"rb_url\") + \"/booking\",",
							"  method: 'POST',",
							"  header: 'Content-Type:application/json',",
							"  body: {",
							"    mode: 'raw',",
							"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
							"  }",
							"};",
							"// sends the request",
							"pm.sendRequest(createBooking, function (err, res) {",
							"  pm.expect(err).is.null;",
							"  pm.variables.set(\"booking_id\", res.json().bookingid)",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5c339da9-0329-4e73-bb56-4bd9f5baad5f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update Booking",
			"item": [
				{
					"name": "UpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "953b387a-bac0-4e85-a60c-724aacfd60c2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cheking firstname change\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstname).to.eql(pm.variables.get(\"firstname\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Cheking lastname change\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastname).to.eql(pm.variables.get(\"lastname\"))\r",
									"});\r",
									"\r",
									"var expectedJsonBody =\r",
									"{\r",
									"  \"firstname\": \"{{firstname}}\",\r",
									"    \"lastname\": \"{{lastname}}\",\r",
									"    \"totalprice\": 111,\r",
									"    \"depositpaid\": true,\r",
									"    \"bookingdates\": {\r",
									"        \"checkin\": \"2018-01-01\",\r",
									"        \"checkout\": \"2019-01-01\"\r",
									"    },\r",
									"    \"additionalneeds\": \"Breakfast\"\r",
									"}\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(expectedJsonBody);\r",
									"});\r",
									"\r",
									"pm.test(\"Cheking lastname change\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expectedJsonBody)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e67cecd2-8529-461b-b414-31d40247a706",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "token=abc123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						},
						"description": "Updates a current booking"
					},
					"response": []
				},
				{
					"name": "Booking update with few info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80bd6cc7-797c-49d4-a440-455b69ee62cd",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});\r",
									"\r",
									"const uuid = require(\"uuid\");\r",
									"// reset the firstname and lastname variables\r",
									"pm.variables.set(\"firstname\", uuid());\r",
									"pm.variables.set(\"lastname\", uuid());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "13f7b28f-8f46-4192-beb1-3880e2ebfcb0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Cookie",
								"value": "token=abc123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						},
						"description": "Updates a current booking with a partial payload"
					},
					"response": []
				}
			],
			"description": "Makes changes to an existing booking",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete and ping",
			"item": [
				{
					"name": "Delete Booking using AUTH",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b97e2ca-57f5-495a-b4f7-0bbe6648f3ab",
								"exec": [
									"pm.test(\"Status code is Succes\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.sendRequest(pm.environment.get(\"rb_url\") + \"/booking/\" + pm.variables.get(\"booking_id\"), function (err, res) {\r",
									"  if (err) { console.log(err); }\r",
									"  pm.test('Booking no longer exists', function () {\r",
									"    pm.expect(err).to.equal(null);\r",
									"    pm.expect(res.code).to.eql(404);\r",
									"  });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3a69d80d-65a2-477d-a902-ca74f3ea20a0",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						},
						"description": "Delete's the one we have created"
					},
					"response": []
				},
				{
					"name": "Delete Booking using Cookie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74b08418-9e96-4c98-85f8-8cca9227868d",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8d62d3fd-017c-44cb-8938-3a8363d63a9a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.sendRequest(pm.environment.get(\"rb_url\") + \"/booking/\" + pm.variables.get(\"booking_id\"), function (err, res) {\r",
									"  if (err) { console.log(err); }\r",
									"  pm.test('Booking no longer exists', function () {\r",
									"    pm.expect(err).to.equal(null);\r",
									"    pm.expect(res.code).to.eql(404);\r",
									"  });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token=abc123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{rb_url}}/booking/10",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "PING",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1ac3221-c0f4-4d27-a764-b22191fec183",
								"exec": [
									"pm.test(\"Successful request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/ping",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"ping"
							]
						},
						"description": "A simple health check endpoint to confirm whether the API is up and running."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d5af6613-8c36-4bf7-828c-ab67c75bf8fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1502ab3f-9e3d-4d80-950e-18846c63b7f1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "ddae3268a407cd0",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9264d14d-2186-4a2f-a45a-903973559c7e",
				"type": "text/javascript",
				"exec": [
					"var fname = [\"karen\", \"sargis\", \"olga\", \"natasha\"];",
					"var lname = [\"karapetyan\", \"sargsyan\", \"ayvazyan\", \"russkaya\"];",
					"",
					"pm.variables.set(\"firstname\", fname[_.random(fname.length - 1)]);",
					"pm.variables.set(\"lastname\", lname[_.random(lname.length - 1)]);",
					"",
					"",
					"pm.variables.set(\"totalprice\", _.random(50, 250));",
					"pm.variables.set(\"depositpaid\", (_.random(1) === 1));",
					"",
					"// the moment module helps with date manipulation and formatting",
					"const moment = require(\"moment\");",
					"var checkin = moment().add(\"days\", _.random(1, 180));",
					"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
					"",
					"var checkout = checkin.add(\"days\", _.random(1, 14));",
					"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
					"",
					"var needs = [\"breakfast\", \"lunch\", \"early checkin\", \"late checkout\", null];",
					"pm.variables.set(\"additionalneeds\", needs[_.random(needs.length - 1)]);",
					"",
					"// put all the selected variables into a new booking object and save to a variable",
					"var booking = {",
					"    \"firstname\": pm.variables.get(\"firstname\"),",
					"    \"lastname\": pm.variables.get(\"lastname\"),",
					"    \"totalprice\": pm.variables.get(\"totalprice\"),",
					"    \"depositpaid\": pm.variables.get(\"depositpaid\"),",
					"    \"bookingdates\": {",
					"        \"checkin\": pm.variables.get(\"checkin\"),",
					"        \"checkout\": pm.variables.get(\"checkout\")",
					"    },",
					"    \"additionalneeds\": pm.variables.get(\"additionalneeds\")",
					"}",
					"pm.variables.set(\"new_booking\", booking)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f0a37995-8287-44f7-8fbe-c2b7437374a8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}