{
	"info": {
		"_postman_id": "b7de9845-357e-4b54-8dc9-047ffe1a2225",
		"name": "Booking  Invalid",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Create Token with invalid cred.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0df030d6-9153-4146-a9e1-9cc21cc89b1a",
								"exec": [
									"pm.test(\"Status must not be 2XX\", function () {\r",
									"    pm.response.to.not.have.success;\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"reason\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    pm.expect(jsonData).to.not.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admi\",\r\n    \"password\" : \"password12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/auth",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c14a09c7-68f2-4ba9-9ef1-e31b6a9fd848",
								"exec": [
									"pm.test(\"Status must not be 2XX\", function () {\r",
									"    pm.response.to.not.have.success;\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"reason\");\r",
									"});\r",
									"\r",
									"// we must be asured that response body always does not contain key:\"token\"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    pm.expect(jsonData).to.not.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"\",\r\n    \"password\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/auth",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3af2c524-d1ae-49e0-a5e0-2cc19e9f7e74",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f2e7c3e7-8c38-4a5c-9b9d-e654ce3a1b41",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CreatBooking",
			"item": [
				{
					"name": "Create Booking invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5558cae0-688c-4523-b492-4c802e8302bb",
								"exec": [
									"// the values in request body are set in collection variables\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.booking.firstname).to.eql(pm.variables.get(\"firstname\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Your test lastname\", function () {\r",
									"    pm.expect(jsonData.booking.lastname).to.eql(pm.variables.get(\"lastname\"));\r",
									"});\r",
									"// checking if the response header contain key:\"Date\" \r",
									"pm.test(\"Date of Creation Check \", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "af96e1d4-4f8a-447e-aae0-ca93b2a20c78",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/booking",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			],
			"description": "The reguests in this folder must not create a new booking in the API ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f65f3f2b-17dd-467c-8df8-d1093cba4d49",
						"type": "text/javascript",
						"exec": [
							"var fname = [\"123\", \"*****\", null, 123, true, false];",
							"var lname = [\"123\", \"*****\", null, 123, true, false];",
							"",
							"pm.variables.set(\"firstname\", fname[_.random(fname.length - 1)]);",
							"pm.variables.set(\"lastname\", lname[_.random(lname.length - 1)]);",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a1948992-63c2-4d76-b5ac-3beb3d3557c7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Booking info",
			"item": [
				{
					"name": "All Id's filterd by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "610b0888-d041-4fd5-90a7-505410af5cf7",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"The response is not empty\", function () {\r",
									"    pm.expect(jsonData).not.to.have.length(0);\r",
									"});\r",
									"\r",
									"//since the name is invalid, the body must contain error message\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"enter valid name\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4b6ad815-68f5-45a8-abeb-88d478b425b4",
								"exec": [
									"var fname = [123, \"*-7\", null];\r",
									"var lname = [\"karapetyan\", \"sargsyan\", \"ayvazyan\", \"russkaya\"];\r",
									"\r",
									"pm.variables.set(\"firstname\", fname[_.random(fname.length - 1)]);\r",
									"pm.variables.set(\"lastname\", lname[_.random(lname.length - 1)]);\r",
									"\r",
									"pm.variables.set(\"totalprice\", _.random(50, 250));\r",
									"pm.variables.set(\"depositpaid\", (_.random(1) === 1));\r",
									"\r",
									"// the moment module helps with date manipulation and formatting\r",
									"const moment = require(\"moment\");\r",
									"var checkin = moment().add(\"days\", _.random(1, 180));\r",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var checkout = checkin.add(\"days\", _.random(1, 14));\r",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var needs = [\"breakfast\", \"lunch\", \"early checkin\", \"late checkout\", null];\r",
									"pm.variables.set(\"additionalneeds\", needs[_.random(needs.length - 1)]);\r",
									"\r",
									"// put all the selected variables into a new booking object and save to a variable\r",
									"var booking = {\r",
									"  \"firstname\": pm.variables.get(\"firstname\"),\r",
									"  \"lastname\": pm.variables.get(\"lastname\"),\r",
									"  \"totalprice\": pm.variables.get(\"totalprice\"),\r",
									"  \"depositpaid\": pm.variables.get(\"depositpaid\"),\r",
									"  \"bookingdates\": {\r",
									"    \"checkin\": pm.variables.get(\"checkin\"),\r",
									"    \"checkout\": pm.variables.get(\"checkout\")\r",
									"  },\r",
									"  \"additionalneeds\": pm.variables.get(\"additionalneeds\")\r",
									"}\r",
									"pm.variables.set(\"new_booking\", booking)\r",
									"\r",
									"\r",
									"// as this project is used by many people, we must always create a new booking in order to test it\r",
									"// creates the request\r",
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"// sends the request\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?firstname={{firstname}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}"
								}
							]
						},
						"description": "Returns the ids filter by name"
					},
					"response": []
				},
				{
					"name": "All Id's filterd by lastname ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d38848c3-1b19-44bc-923c-a4beb150c578",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"The response is not empty\", function () {\r",
									"    pm.expect(jsonData).not.to.have.length(0);\r",
									"});\r",
									"\r",
									"//since the lastname is invalid, the body must contain error message\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"enter valid lastname\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "efe629a7-ae4d-48ca-adb3-7abfe555fed6",
								"exec": [
									"var fname = [\"karen\", \"sargis\", \"olga\", \"natasha\"];\r",
									"var lname = [123, \"*-7\"];\r",
									"\r",
									"pm.variables.set(\"firstname\", fname[_.random(fname.length - 1)]);\r",
									"pm.variables.set(\"lastname\", lname[_.random(lname.length - 1)]);\r",
									"\r",
									"pm.variables.set(\"totalprice\", _.random(50, 250));\r",
									"pm.variables.set(\"depositpaid\", (_.random(1) === 1));\r",
									"\r",
									"// the moment module helps with date manipulation and formatting\r",
									"const moment = require(\"moment\");\r",
									"var checkin = moment().add(\"days\", _.random(1, 180));\r",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var checkout = checkin.add(\"days\", _.random(1, 14));\r",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var needs = [\"breakfast\", \"lunch\", \"early checkin\", \"late checkout\", null];\r",
									"pm.variables.set(\"additionalneeds\", needs[_.random(needs.length - 1)]);\r",
									"\r",
									"// put all the selected variables into a new booking object and save to a variable\r",
									"var booking = {\r",
									"  \"firstname\": pm.variables.get(\"firstname\"),\r",
									"  \"lastname\": pm.variables.get(\"lastname\"),\r",
									"  \"totalprice\": pm.variables.get(\"totalprice\"),\r",
									"  \"depositpaid\": pm.variables.get(\"depositpaid\"),\r",
									"  \"bookingdates\": {\r",
									"    \"checkin\": pm.variables.get(\"checkin\"),\r",
									"    \"checkout\": pm.variables.get(\"checkout\")\r",
									"  },\r",
									"  \"additionalneeds\": pm.variables.get(\"additionalneeds\")\r",
									"}\r",
									"pm.variables.set(\"new_booking\", booking)\r",
									"\r",
									"\r",
									"// as this project is used by many people, we must always create a new booking in order to test it\r",
									"// creates the request\r",
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"// sends the request\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?lastname={{lastname}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						},
						"description": "Returns the ids filter by lastname"
					},
					"response": []
				},
				{
					"name": "All Id's filterd by name and lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6335e90-bc60-4bce-aadc-47bbcf43cf9d",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"The response is not empty\", function () {\r",
									"    pm.expect(jsonData).not.to.have.length(0);\r",
									"});\r",
									"\r",
									"//since the values are invalid, the body must contain error message\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"enter valid name and lastname\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ceee6552-20f0-4cf4-816e-08a114d45773",
								"exec": [
									"var fname = [123, \"*-7\", null];\r",
									"var lname = [123, \"*-7\", null];\r",
									"\r",
									"pm.variables.set(\"firstname\", fname[_.random(fname.length - 1)]);\r",
									"pm.variables.set(\"lastname\", lname[_.random(lname.length - 1)]);\r",
									"\r",
									"pm.variables.set(\"totalprice\", _.random(50, 250));\r",
									"pm.variables.set(\"depositpaid\", (_.random(1) === 1));\r",
									"\r",
									"// the moment module helps with date manipulation and formatting\r",
									"const moment = require(\"moment\");\r",
									"var checkin = moment().add(\"days\", _.random(1, 180));\r",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var checkout = checkin.add(\"days\", _.random(1, 14));\r",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var needs = [\"breakfast\", \"lunch\", \"early checkin\", \"late checkout\", null];\r",
									"pm.variables.set(\"additionalneeds\", needs[_.random(needs.length - 1)]);\r",
									"\r",
									"// put all the selected variables into a new booking object and save to a variable\r",
									"var booking = {\r",
									"    \"firstname\": pm.variables.get(\"firstname\"),\r",
									"    \"lastname\": pm.variables.get(\"lastname\"),\r",
									"    \"totalprice\": pm.variables.get(\"totalprice\"),\r",
									"    \"depositpaid\": pm.variables.get(\"depositpaid\"),\r",
									"    \"bookingdates\": {\r",
									"        \"checkin\": pm.variables.get(\"checkin\"),\r",
									"        \"checkout\": pm.variables.get(\"checkout\")\r",
									"    },\r",
									"    \"additionalneeds\": pm.variables.get(\"additionalneeds\")\r",
									"}\r",
									"pm.variables.set(\"new_booking\", booking)\r",
									"\r",
									"\r",
									"// as this project is used by many people, we must always create a new booking in order to test it\r",
									"// creates the request\r",
									"const createBooking = {\r",
									"    url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"    method: 'POST',\r",
									"    header: 'Content-Type:application/json',\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"    }\r",
									"};\r",
									"// sends the request\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?firstname={{firstname}}&lastname={{lastname}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						},
						"description": "Returns the ids filter by name and lastname"
					},
					"response": []
				},
				{
					"name": "Booking id's filterd by date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "998c1b7b-3d2a-4a71-986c-e25daac5dd4a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"//since checkin is bigger than checkout the error message must appear\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"checkin is bigger than checkout\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ea2b58b-b920-43a7-a341-c8b9b06f2158",
								"exec": [
									"var fname = [\"karen\", \"sargis\", \"olga\", \"natasha\"];\r",
									"var lname = [\"karapetyan\", \"sargsyan\", \"ayvazyan\", \"russkaya\"];\r",
									"\r",
									"pm.variables.set(\"firstname\", fname[_.random(fname.length - 1)]);\r",
									"pm.variables.set(\"lastname\", lname[_.random(lname.length - 1)]);\r",
									"\r",
									"pm.variables.set(\"totalprice\", _.random(50, 250));\r",
									"pm.variables.set(\"depositpaid\", (_.random(1) === 1));\r",
									"\r",
									"// the moment module helps with date manipulation and formatting\r",
									"const moment = require(\"moment\");\r",
									"var checkin = moment().add(\"days\", _.random(1, 180));\r",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var checkout = checkin.add(\"days\", _.random(1, 14));\r",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var needs = [\"breakfast\", \"lunch\", \"early checkin\", \"late checkout\", null];\r",
									"pm.variables.set(\"additionalneeds\", needs[_.random(needs.length - 1)]);\r",
									"\r",
									"// put all the selected variables into a new booking object and save to a variable\r",
									"var booking = {\r",
									"  \"firstname\": pm.variables.get(\"firstname\"),\r",
									"  \"lastname\": pm.variables.get(\"lastname\"),\r",
									"  \"totalprice\": pm.variables.get(\"totalprice\"),\r",
									"  \"depositpaid\": pm.variables.get(\"depositpaid\"),\r",
									"  \"bookingdates\": {\r",
									"    \"checkin\": pm.variables.get(\"checkin\"),\r",
									"    \"checkout\": pm.variables.get(\"checkout\")\r",
									"  },\r",
									"  \"additionalneeds\": pm.variables.get(\"additionalneeds\")\r",
									"}\r",
									"pm.variables.set(\"new_booking\", booking)\r",
									"\r",
									"\r",
									"// as this project is used by many people, we must always create a new booking in order to test it\r",
									"// creates the request\r",
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"// sends the request\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?checkin=2060-18-10&checkout=2050-12-10",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2060-18-10"
								},
								{
									"key": "checkout",
									"value": "2050-12-10"
								}
							]
						},
						"description": "All id's filter by check-in, check-out date"
					},
					"response": []
				},
				{
					"name": "Booking id's filterd by check-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7063ee2-72bd-47f3-83a0-91f6973692f7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"// use lodash map to get a flat array of all the returned booking ids\r",
									"// https://lodash.com/docs/4.17.11#map\r",
									"var booking_ids = _.map(jsonData, 'bookingid');\r",
									"console.log(booking_ids);\r",
									"\r",
									"// the id for our newly created object should be there\r",
									"pm.test(\"Expected booking id is in the returned array\", function () {\r",
									"    pm.expect(booking_ids).to.include(pm.variables.get(\"booking_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?checkin={{checkin}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}"
								},
								{
									"key": "checkout",
									"value": "{{checkout}}",
									"disabled": true
								}
							]
						},
						"description": "All id's filter by check-in date"
					},
					"response": []
				},
				{
					"name": "Booking id's filterd by check-out",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2919f5ef-9a97-4b87-867b-c963235c3b04",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    pm.expect(jsonData).to.not.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"//since checkout is false the error message must appear\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"invalid date value\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "47354762-87a2-4c18-b69e-c281f8a7d91c",
								"exec": [
									"var fname = [\"karen\", \"sargis\", \"olga\", \"natasha\"];\r",
									"var lname = [\"karapetyan\", \"sargsyan\", \"ayvazyan\", \"russkaya\"];\r",
									"\r",
									"pm.variables.set(\"firstname\", fname[_.random(fname.length - 1)]);\r",
									"pm.variables.set(\"lastname\", lname[_.random(lname.length - 1)]);\r",
									"\r",
									"pm.variables.set(\"totalprice\", _.random(50, 250));\r",
									"pm.variables.set(\"depositpaid\", (_.random(1) === 1));\r",
									"\r",
									"// the moment module helps with date manipulation and formatting\r",
									"const moment = require(\"moment\");\r",
									"var checkin = moment().add(\"days\", _.random(1, 180));\r",
									"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var checkout = checkin.add(\"days\", _.random(1, 14));\r",
									"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var needs = [\"breakfast\", \"lunch\", \"early checkin\", \"late checkout\", null];\r",
									"pm.variables.set(\"additionalneeds\", needs[_.random(needs.length - 1)]);\r",
									"\r",
									"// put all the selected variables into a new booking object and save to a variable\r",
									"var booking = {\r",
									"  \"firstname\": pm.variables.get(\"firstname\"),\r",
									"  \"lastname\": pm.variables.get(\"lastname\"),\r",
									"  \"totalprice\": pm.variables.get(\"totalprice\"),\r",
									"  \"depositpaid\": pm.variables.get(\"depositpaid\"),\r",
									"  \"bookingdates\": {\r",
									"    \"checkin\": pm.variables.get(\"checkin\"),\r",
									"    \"checkout\": pm.variables.get(\"checkout\")\r",
									"  },\r",
									"  \"additionalneeds\": pm.variables.get(\"additionalneeds\")\r",
									"}\r",
									"pm.variables.set(\"new_booking\", booking)\r",
									"\r",
									"\r",
									"// as this project is used by many people, we must always create a new booking in order to test it\r",
									"// creates the request\r",
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"// sends the request\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking?checkout=2020-18-20",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2020-18-20"
								}
							]
						},
						"description": "All id's filter by check-out date"
					},
					"response": []
				},
				{
					"name": "Booking by exact id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "06e43bec-ef5f-4407-a384-61b94d6e1e06",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"  pm.variables.set(\"expected\", res.json().booking)\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a2761f2-3794-4664-b095-a894f7cb4d7d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Expected booking is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"expected\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						},
						"description": "Returns a specific booking based upon the booking id provided"
					},
					"response": []
				}
			],
			"description": "This will contain the main requests for operating with API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "434eacb6-a5f0-49e0-9db4-9c369af5f7ff",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "68c50ddd-3be4-4eec-8810-a1e5268307ea",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update Booking",
			"item": [
				{
					"name": "UpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95d1b37f-6efe-40d2-8c4f-32094b39a8e4",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must contain Bad request\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ce5259f-85ba-4694-a4ac-2566ec96b32d",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "token=abc123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						},
						"description": "Updates a current booking"
					},
					"response": []
				},
				{
					"name": "Booking update with few info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1cae827a-c012-44f3-8fce-7e798d287fa8",
								"exec": [
									" const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});\r",
									"\r",
									"const uuid = require(\"uuid\");\r",
									"// reset the firstname and lastname variables\r",
									"pm.variables.set(\"firstname\", uuid());\r",
									"pm.variables.set(\"lastname\", uuid());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cffce061-8a0b-486e-8c52-461b45301aeb",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must contain Bad request\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Cookie",
								"value": "token=abc123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"\",\r\n    \"lastname\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/booking/{{booking_id}}",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						},
						"description": "Updates a current booking with a partial payload"
					},
					"response": []
				}
			],
			"description": "Makes changes to an existing booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4d0e5317-e64b-4654-8420-f4b644b35e70",
						"type": "text/javascript",
						"exec": [
							"var fname = [\"karen\", \"sargis\", \"olga\", \"natasha\"];",
							"var lname = [\"karapetyan\", \"sargsyan\", \"ayvazyan\", \"russkaya\"];",
							"",
							"pm.variables.set(\"firstname\", fname[_.random(fname.length - 1)]);",
							"pm.variables.set(\"lastname\", lname[_.random(lname.length - 1)]);",
							"",
							"",
							"pm.variables.set(\"totalprice\", _.random(50, 250));",
							"pm.variables.set(\"depositpaid\", (_.random(1) === 1));",
							"",
							"// the moment module helps with date manipulation and formatting",
							"const moment = require(\"moment\");",
							"var checkin = moment().add(\"days\", _.random(1, 180));",
							"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
							"",
							"var checkout = checkin.add(\"days\", _.random(1, 14));",
							"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
							"",
							"var needs = [\"breakfast\", \"lunch\", \"early checkin\", \"late checkout\", null];",
							"pm.variables.set(\"additionalneeds\", needs[_.random(needs.length - 1)]);",
							"",
							"// put all the selected variables into a new booking object and save to a variable",
							"var booking = {",
							"    \"firstname\": pm.variables.get(\"firstname\"),",
							"    \"lastname\": pm.variables.get(\"lastname\"),",
							"    \"totalprice\": pm.variables.get(\"totalprice\"),",
							"    \"depositpaid\": pm.variables.get(\"depositpaid\"),",
							"    \"bookingdates\": {",
							"        \"checkin\": pm.variables.get(\"checkin\"),",
							"        \"checkout\": pm.variables.get(\"checkout\")",
							"    },",
							"    \"additionalneeds\": pm.variables.get(\"additionalneeds\")",
							"}",
							"pm.variables.set(\"new_booking\", booking)"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "12760e5a-e092-4c69-aef9-e9cd73487469",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete and ping",
			"item": [
				{
					"name": "Delete Booking using AUTH",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "036a74c9-4893-400b-90f4-4be8df591bbf",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must contain Not Found\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "740e4098-b8e9-4ad9-a4bf-8d8ab2c1c574",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{rb_url}}/booking/",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								""
							]
						},
						"description": "Delete's the one we have created"
					},
					"response": []
				},
				{
					"name": "Delete Booking using Cookie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d55168f-a589-48e3-bef0-cee08bb2df7c",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.environment.get(\"rb_url\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"  pm.expect(err).is.null;\r",
									"  pm.variables.set(\"booking_id\", res.json().bookingid)\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6bb223ed-f9a7-48b8-928d-2ff144d7e8c8",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token=abc123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{rb_url}}/booking/10",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"booking",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "PING",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b296156-a0fd-49c8-b476-15cf3c7c878c",
								"exec": [
									"pm.test(\"Successful request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/ping",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"ping"
							]
						},
						"description": "A simple health check endpoint to confirm whether the API is up and running."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "37650346-7f83-4095-bfba-d06833d41091",
						"type": "text/javascript",
						"exec": [
							"var fname = [123, \"*-7\", null];",
							"var lname = [\"karapetyan\", \"sargsyan\", \"ayvazyan\", \"russkaya\"];",
							"",
							"pm.variables.set(\"firstname\", fname[_.random(fname.length - 1)]);",
							"pm.variables.set(\"lastname\", lname[_.random(lname.length - 1)]);",
							"",
							"pm.variables.set(\"totalprice\", _.random(50, 250));",
							"pm.variables.set(\"depositpaid\", (_.random(1) === 1));",
							"",
							"// the moment module helps with date manipulation and formatting",
							"const moment = require(\"moment\");",
							"var checkin = moment().add(\"days\", _.random(1, 180));",
							"pm.variables.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
							"",
							"var checkout = checkin.add(\"days\", _.random(1, 14));",
							"pm.variables.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
							"",
							"var needs = [\"breakfast\", \"lunch\", \"early checkin\", \"late checkout\", null];",
							"pm.variables.set(\"additionalneeds\", needs[_.random(needs.length - 1)]);",
							"",
							"// put all the selected variables into a new booking object and save to a variable",
							"var booking = {",
							"  \"firstname\": pm.variables.get(\"firstname\"),",
							"  \"lastname\": pm.variables.get(\"lastname\"),",
							"  \"totalprice\": pm.variables.get(\"totalprice\"),",
							"  \"depositpaid\": pm.variables.get(\"depositpaid\"),",
							"  \"bookingdates\": {",
							"    \"checkin\": pm.variables.get(\"checkin\"),",
							"    \"checkout\": pm.variables.get(\"checkout\")",
							"  },",
							"  \"additionalneeds\": pm.variables.get(\"additionalneeds\")",
							"}",
							"pm.variables.set(\"new_booking\", booking)",
							"",
							"",
							"// as this project is used by many people, we must always create a new booking in order to test it",
							"// creates the request",
							"const createBooking = {",
							"  url: pm.environment.get(\"rb_url\") + \"/booking\",",
							"  method: 'POST',",
							"  header: 'Content-Type:application/json',",
							"  body: {",
							"    mode: 'raw',",
							"    raw: JSON.stringify(pm.variables.get(\"new_booking\"))",
							"  }",
							"};",
							"// sends the request",
							"pm.sendRequest(createBooking, function (err, res) {",
							"  pm.expect(err).is.null;",
							"  pm.variables.set(\"booking_id\", res.json().bookingid)",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "88f98474-c230-4f82-821c-af9de53f5dab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "ddae3268a407cd0",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "77b4c3fe-6278-4128-a7ce-5e1cc13e59c2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5be5182e-137e-431e-81c9-3c7bd1b0acf3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}